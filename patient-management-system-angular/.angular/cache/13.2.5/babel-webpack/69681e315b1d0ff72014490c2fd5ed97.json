{"ast":null,"code":"import { Observable } from '../Observable';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function scheduleAsyncIterable(input, scheduler) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n\n  return new Observable(function (subscriber) {\n    executeSchedule(subscriber, scheduler, function () {\n      var iterator = input[Symbol.asyncIterator]();\n      executeSchedule(subscriber, scheduler, function () {\n        iterator.next().then(function (result) {\n          if (result.done) {\n            subscriber.complete();\n          } else {\n            subscriber.next(result.value);\n          }\n        });\n      }, 0, true);\n    });\n  });\n} //# sourceMappingURL=scheduleAsyncIterable.js.map","map":{"version":3,"sources":["F:/work/Cegedim Hackathon 2022/patient-management-system/patient-management-system-angular/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleAsyncIterable.js"],"names":["Observable","executeSchedule","scheduleAsyncIterable","input","scheduler","Error","subscriber","iterator","Symbol","asyncIterator","next","then","result","done","complete","value"],"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,OAAO,SAASC,qBAAT,CAA+BC,KAA/B,EAAsCC,SAAtC,EAAiD;AACpD,MAAI,CAACD,KAAL,EAAY;AACR,UAAM,IAAIE,KAAJ,CAAU,yBAAV,CAAN;AACH;;AACD,SAAO,IAAIL,UAAJ,CAAe,UAAUM,UAAV,EAAsB;AACxCL,IAAAA,eAAe,CAACK,UAAD,EAAaF,SAAb,EAAwB,YAAY;AAC/C,UAAIG,QAAQ,GAAGJ,KAAK,CAACK,MAAM,CAACC,aAAR,CAAL,EAAf;AACAR,MAAAA,eAAe,CAACK,UAAD,EAAaF,SAAb,EAAwB,YAAY;AAC/CG,QAAAA,QAAQ,CAACG,IAAT,GAAgBC,IAAhB,CAAqB,UAAUC,MAAV,EAAkB;AACnC,cAAIA,MAAM,CAACC,IAAX,EAAiB;AACbP,YAAAA,UAAU,CAACQ,QAAX;AACH,WAFD,MAGK;AACDR,YAAAA,UAAU,CAACI,IAAX,CAAgBE,MAAM,CAACG,KAAvB;AACH;AACJ,SAPD;AAQH,OATc,EASZ,CATY,EAST,IATS,CAAf;AAUH,KAZc,CAAf;AAaH,GAdM,CAAP;AAeH,C,CACD","sourcesContent":["import { Observable } from '../Observable';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function scheduleAsyncIterable(input, scheduler) {\n    if (!input) {\n        throw new Error('Iterable cannot be null');\n    }\n    return new Observable(function (subscriber) {\n        executeSchedule(subscriber, scheduler, function () {\n            var iterator = input[Symbol.asyncIterator]();\n            executeSchedule(subscriber, scheduler, function () {\n                iterator.next().then(function (result) {\n                    if (result.done) {\n                        subscriber.complete();\n                    }\n                    else {\n                        subscriber.next(result.value);\n                    }\n                });\n            }, 0, true);\n        });\n    });\n}\n//# sourceMappingURL=scheduleAsyncIterable.js.map"]},"metadata":{},"sourceType":"module"}